// Code generated by MockGen. DO NOT EDIT.
// Source: example/employee/server/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "example/employee/server/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDepartment mocks base method.
func (m *MockStore) CreateDepartment(arg0 context.Context, arg1 string) (db.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", arg0, arg1)
	ret0, _ := ret[0].(db.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockStoreMockRecorder) CreateDepartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockStore)(nil).CreateDepartment), arg0, arg1)
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(arg0 context.Context, arg1 db.CreateEmployeeParams) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), arg0, arg1)
}

// CreateJob mocks base method.
func (m *MockStore) CreateJob(arg0 context.Context, arg1 db.CreateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockStoreMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockStore)(nil).CreateJob), arg0, arg1)
}

// DeleteDepartments mocks base method.
func (m *MockStore) DeleteDepartments(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepartments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDepartments indicates an expected call of DeleteDepartments.
func (mr *MockStoreMockRecorder) DeleteDepartments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepartments", reflect.TypeOf((*MockStore)(nil).DeleteDepartments), arg0, arg1)
}

// DeleteEmployee mocks base method.
func (m *MockStore) DeleteEmployee(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockStoreMockRecorder) DeleteEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockStore)(nil).DeleteEmployee), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockStore) DeleteJob(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockStoreMockRecorder) DeleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockStore)(nil).DeleteJob), arg0, arg1)
}

// GetDepartment mocks base method.
func (m *MockStore) GetDepartment(arg0 context.Context, arg1 int64) (db.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", arg0, arg1)
	ret0, _ := ret[0].(db.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockStoreMockRecorder) GetDepartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockStore)(nil).GetDepartment), arg0, arg1)
}

// GetEmployee mocks base method.
func (m *MockStore) GetEmployee(arg0 context.Context, arg1 int64) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockStoreMockRecorder) GetEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockStore)(nil).GetEmployee), arg0, arg1)
}

// GetJob mocks base method.
func (m *MockStore) GetJob(arg0 context.Context, arg1 int64) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockStoreMockRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockStore)(nil).GetJob), arg0, arg1)
}

// ListDepartments mocks base method.
func (m *MockStore) ListDepartments(arg0 context.Context, arg1 db.ListDepartmentsParams) ([]db.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDepartments", arg0, arg1)
	ret0, _ := ret[0].([]db.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDepartments indicates an expected call of ListDepartments.
func (mr *MockStoreMockRecorder) ListDepartments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDepartments", reflect.TypeOf((*MockStore)(nil).ListDepartments), arg0, arg1)
}

// ListEmployees mocks base method.
func (m *MockStore) ListEmployees(arg0 context.Context, arg1 db.ListEmployeesParams) ([]db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", arg0, arg1)
	ret0, _ := ret[0].([]db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockStoreMockRecorder) ListEmployees(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockStore)(nil).ListEmployees), arg0, arg1)
}

// ListJobs mocks base method.
func (m *MockStore) ListJobs(arg0 context.Context, arg1 db.ListJobsParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockStoreMockRecorder) ListJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockStore)(nil).ListJobs), arg0, arg1)
}

// UpdateDepartment mocks base method.
func (m *MockStore) UpdateDepartment(arg0 context.Context, arg1 db.UpdateDepartmentParams) (db.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDepartment", arg0, arg1)
	ret0, _ := ret[0].(db.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDepartment indicates an expected call of UpdateDepartment.
func (mr *MockStoreMockRecorder) UpdateDepartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDepartment", reflect.TypeOf((*MockStore)(nil).UpdateDepartment), arg0, arg1)
}

// UpdateEmployee mocks base method.
func (m *MockStore) UpdateEmployee(arg0 context.Context, arg1 db.UpdateEmployeeParams) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockStoreMockRecorder) UpdateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockStore)(nil).UpdateEmployee), arg0, arg1)
}

// UpdateJob mocks base method.
func (m *MockStore) UpdateJob(arg0 context.Context, arg1 db.UpdateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockStoreMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockStore)(nil).UpdateJob), arg0, arg1)
}
