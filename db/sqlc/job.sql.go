// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
    job_title,
    min_salary,
    max_salary
) VALUES (
             $1, $2, $3
         )
    RETURNING job_id, job_title, min_salary, max_salary
`

type CreateJobParams struct {
	JobTitle  string        `json:"job_title"`
	MinSalary sql.NullInt64 `json:"min_salary"`
	MaxSalary sql.NullInt64 `json:"max_salary"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob, arg.JobTitle, arg.MinSalary, arg.MaxSalary)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.JobTitle,
		&i.MinSalary,
		&i.MaxSalary,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE job_id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, jobID int64) error {
	_, err := q.db.ExecContext(ctx, deleteJob, jobID)
	return err
}

const getJob = `-- name: GetJob :one
SELECT job_id, job_title, min_salary, max_salary FROM jobs
WHERE job_id = $1 LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, jobID int64) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, jobID)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.JobTitle,
		&i.MinSalary,
		&i.MaxSalary,
	)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT job_id, job_title, min_salary, max_salary FROM jobs
ORDER BY job_id
LIMIT $1
OFFSET $2
`

type ListJobsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobs(ctx context.Context, arg ListJobsParams) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.JobID,
			&i.JobTitle,
			&i.MinSalary,
			&i.MaxSalary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs
SET job_title = $2, min_salary = $3, max_salary = $4
WHERE job_id = $1
RETURNING job_id, job_title, min_salary, max_salary
`

type UpdateJobParams struct {
	JobID     int64         `json:"job_id"`
	JobTitle  string        `json:"job_title"`
	MinSalary sql.NullInt64 `json:"min_salary"`
	MaxSalary sql.NullInt64 `json:"max_salary"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, updateJob,
		arg.JobID,
		arg.JobTitle,
		arg.MinSalary,
		arg.MaxSalary,
	)
	var i Job
	err := row.Scan(
		&i.JobID,
		&i.JobTitle,
		&i.MinSalary,
		&i.MaxSalary,
	)
	return i, err
}
