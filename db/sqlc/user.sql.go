// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET hashed_password = $1, status = 'activated', updated_at = now()
WHERE email = $2
`

type ActivateUserParams struct {
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) ActivateUser(ctx context.Context, arg ActivateUserParams) error {
	_, err := q.db.ExecContext(ctx, activateUser, arg.HashedPassword, arg.Email)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
email,
hashed_password,
status,
role_id
) VALUES (
$1, $2, $3, $4
)
RETURNING email, status, hashed_password, updated_at, created_at, role_id
`

type CreateUserParams struct {
	Email          string        `json:"email"`
	HashedPassword string        `json:"hashed_password"`
	Status         UserStatus    `json:"status"`
	RoleID         sql.NullInt64 `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.Status,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Status,
		&i.HashedPassword,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, status, hashed_password, updated_at, created_at, role_id FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Status,
		&i.HashedPassword,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}
