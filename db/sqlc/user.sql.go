// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
email,
hashed_password,
status
) VALUES (
$1, $2, $3
)
RETURNING email, status, hashed_password, updated_at, created_at
`

type CreateUserParams struct {
	Email          string     `json:"email"`
	HashedPassword string     `json:"hashed_password"`
	Status         UserStatus `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.Status)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Status,
		&i.HashedPassword,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, status, hashed_password, updated_at, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Status,
		&i.HashedPassword,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
