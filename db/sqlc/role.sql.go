// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: role.sql

package db

import (
	"context"
	"encoding/json"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
role,
privileges
) VALUES (
$1, $2
)
RETURNING id, role, privileges, updated_at, created_at
`

type CreateRoleParams struct {
	Role       string          `json:"role"`
	Privileges json.RawMessage `json:"privileges"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Role, arg.Privileges)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Privileges,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllRole = `-- name: DeleteAllRole :exec
DELETE FROM roles
`

func (q *Queries) DeleteAllRole(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRole)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, role, privileges, updated_at, created_at FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Privileges,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRoleByRoleName = `-- name: GetRoleByRoleName :one
SELECT id, role, privileges, updated_at, created_at FROM roles
WHERE role = $1 LIMIT 1
`

func (q *Queries) GetRoleByRoleName(ctx context.Context, role string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByRoleName, role)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Privileges,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
